.text
.globl main
#-------------------------------------------- Compiler Functions --------------------------------------------#
ReadLine:
        li $t0 , 0
        li $t1 , '\n'
        loopReadLine:
            li $v0 , 12
            syscall
            addi $t0 , $t0 , 1
            addi $sp , $sp , -1
            beq $v0 , $t1 , endLoopReadLine
            sb $v0 , 1($sp)
            j loopReadLine
            endLoopReadLine:
            sb $zero , 1($sp)
        # Allocating Space in Heap
        li $v0 , 9
        addi $a0 , $t0 , 0
        syscall
        move $t1 , $v0 # $t1 Holds the address of String in Heap
        # Moving String from stack to Heap
        addi $t0 , $t0 , -1 # $t0 is the offset of char in Heap ( from the end of allocated area )
        loopMoveString:
            add $t2 , $t1 , $t0 # $t2 is Char address in Heap
            lb $t3 , 1($sp)
            sb $t3 , 0($t2)
            beq $t0 , $zero , endLoopMoveString
            addi $sp , $sp , 1
            addi $t0 , $t0 , -1
            j loopMoveString
        endLoopMoveString:
        addi $sp , $sp , 1
        # Here $v0 Contains the string address allocated in Heap
        jr $ra

StringsEquality:
	move $t1 , $a0 # String 1
	move $t2 , $a1 # String 2
	li $t5 , 1
	loopCheckEquality:
		lb $t3 , 0($t1)
		lb $t4 , 0($t2)
		bne $t3 , $t4 , StringsNotEqualLabel
		beq $t3 , $zero , endLoopCheckEquality
		addi $t1 , $t1 , 1
		addi $t2 , $t2 , 1
		j loopCheckEquality
		StringsNotEqualLabel:
		li $t5 , 0
	endLoopCheckEquality:
	move $v0 , $t5
	jr $ra

StringsInequality:
	addi $sp , $sp , -4
	sw $ra , 4($sp)
	jal StringsEquality
	addi $sp , $sp , 4
	lw $ra , 0($sp)
	nor $v0 , $v0 , $v0
	addi $v0 , $v0 , 2 # All 1's from bit[1] to left becomes Zero
	jr $ra
#-------------------------------------------- Program --------------------------------------------#
main: # Start function body
# Function Body :
# Begin of Statement Block
addi $sp , $sp , -8 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Int Constant : 10
li $t0 , 10
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
# End of Expression Optional
addi $sp , $sp 4
L1: # Starting While Loop Body
# Calculating While Condition
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 0
li $t0 , 0
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Greater or Equal Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sge $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading While Condition Result
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L2 # Jumping to end lable if expression is false
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 1
li $t0 , 1
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Sub Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sub $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
# End of Expression Optional
addi $sp , $sp 4
# Calculating IF Condition
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 5
li $t0 , 5
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Equal Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
seq $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading IF Condition
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L0 # Jumping to end lable if expression is false
# IF Statement Body
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
j L2 # Break from loop while
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
L0:
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
j L1 # Jumping to beggining of while loop
L2:
# String Constant : "Should Print from 9 to 6"
la $t0, D0
sw $t0, 0($sp)
addi $sp, $sp, -4
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# String Constant : "-------------------"
la $t0, D1
sw $t0, 0($sp)
addi $sp, $sp, -4
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Int Constant : 10
li $t0 , 10
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
# End of Expression Optional
addi $sp , $sp 4
L4: # Starting While Loop Body
# Calculating While Condition
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 0
li $t0 , 0
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Greater or Equal Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sge $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading While Condition Result
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L5 # Jumping to end lable if expression is false
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 1
li $t0 , 1
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Sub Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sub $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
# End of Expression Optional
addi $sp , $sp 4
# Calculating IF Condition
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 3
li $t0 , 3
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Equal Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
seq $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading IF Condition
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L3 # Jumping to end lable if expression is false
# IF Statement Body
j L5 # Break from loop while
L3:
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
j L4 # Jumping to beggining of while loop
L5:
# String Constant : "Should Print from 9 to 4"
la $t0, D2
sw $t0, 0($sp)
addi $sp, $sp, -4
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# String Constant : "-------------------"
la $t0, D3
sw $t0, 0($sp)
addi $sp, $sp, -4
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Int Constant : 0
li $t0 , 0
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
# End of Expression Optional
addi $sp , $sp 4
L9: # Starting While Loop Body
# Calculating While Condition
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 10
li $t0 , 10
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Less Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
slt $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading While Condition Result
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L10 # Jumping to end lable if expression is false
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Int Constant : 0
li $t0 , 0
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
# End of Expression Optional
addi $sp , $sp 4
L7: # Starting While Loop Body
# Calculating While Condition
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : b
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of b Pushed to Stack
# Int Constant : 10
li $t0 , 10
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Less Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
slt $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading While Condition Result
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L8 # Jumping to end lable if expression is false
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : b
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of b Pushed to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# String Constant : "-----"
la $t0, D4
sw $t0, 0($sp)
addi $sp, $sp, -4
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Calculating IF Condition
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : b
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of b Pushed to Stack
# Int Constant : 4
li $t0 , 4
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Equal Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
seq $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading IF Condition
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L6 # Jumping to end lable if expression is false
# IF Statement Body
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
j L8 # Break from loop while
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
L6:
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : b
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of b Pushed to Stack
# Int Constant : 1
li $t0 , 1
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Add Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
add $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
# End of Expression Optional
addi $sp , $sp 4
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
j L7 # Jumping to beggining of while loop
L8:
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 1
li $t0 , 1
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Add Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
add $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
# End of Expression Optional
addi $sp , $sp 4
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
j L9 # Jumping to beggining of while loop
L10:
# String Constant : "-------------------"
la $t0, D5
sw $t0, 0($sp)
addi $sp, $sp, -4
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Initialization Expression of Loop for
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Int Constant : 0
li $t0 , 0
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
addi $sp , $sp , 4 # pop init expr of loop for
L12: # Starting for Loop Body
# Calculating For Loop Condition
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 10
li $t0 , 10
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Less Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
slt $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading For Loop Condition Result
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L13 # Jumping to end lable if Condition Expression of for loop is false
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Calculating IF Condition
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 7
li $t0 , 7
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Equal Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
seq $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading IF Condition
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L11 # Jumping to end lable if expression is false
# IF Statement Body
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
j L13 # Break from loop for
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
L11:
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
# Step Expression of For loop 
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 1
li $t0 , 1
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Add Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
add $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
addi $sp , $sp , 4 # pop step expr of loop for
j L12 # Jumping to beggining of while loop
L13:
# String Constant : "a should be : 0 -> 7"
la $t0, D6
sw $t0, 0($sp)
addi $sp, $sp, -4
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# String Constant : "----------------------------"
la $t0, D7
sw $t0, 0($sp)
addi $sp, $sp, -4
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Initialization Expression of Loop for
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Int Constant : 0
li $t0 , 0
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
addi $sp , $sp , 4 # pop init expr of loop for
L17: # Starting for Loop Body
# Calculating For Loop Condition
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 10
li $t0 , 10
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Less Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
slt $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading For Loop Condition Result
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L18 # Jumping to end lable if Condition Expression of for loop is false
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
# Initialization Expression of Loop for
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Int Constant : 0
li $t0 , 0
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
addi $sp , $sp , 4 # pop init expr of loop for
L15: # Starting for Loop Body
# Calculating For Loop Condition
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : b
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of b Pushed to Stack
# Int Constant : 10
li $t0 , 10
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Less Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
slt $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading For Loop Condition Result
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L16 # Jumping to end lable if Condition Expression of for loop is false
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : b
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of b Pushed to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Calculating IF Condition
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : b
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of b Pushed to Stack
# Int Constant : 3
li $t0 , 3
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Equal Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
seq $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Loading IF Condition
addi $sp , $sp , 4
lw $t0 , 0($sp)
beqz $t0 , L14 # Jumping to end lable if expression is false
# IF Statement Body
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
j L16 # Break from loop for
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
L14:
# String Constant : "----"
la $t0, D8
sw $t0, 0($sp)
addi $sp, $sp, -4
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
# Step Expression of For loop 
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Loading Address of ID : b
addi $s7, $fp, 0
sw $s7, 0($sp) # Push Address of b to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : b
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of b Pushed to Stack
# Int Constant : 1
li $t0 , 1
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Add Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
add $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
addi $sp , $sp , 4 # pop step expr of loop for
j L15 # Jumping to beggining of while loop
L16:
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
# Step Expression of For loop 
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Loading Address of ID : a
addi $s7, $fp, 4
sw $s7, 0($sp) # Push Address of a to Stack
addi $sp, $sp, -4
# Load Value from Address of ID : a
lw $t0, 4($sp)
lw $t0 , 0($t0)
sw $t0 , 4($sp) # Value of a Pushed to Stack
# Int Constant : 1
li $t0 , 1
sw $t0 , 0($sp)
addi $sp, $sp, -4
# Add Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
add $t0 , $t0 , $t1
sw $t0 , 8($sp)
addi $sp , $sp , 4
# Assign Expression
lw $t0 , 8($sp)
lw $t1 , 4($sp)
sw $t1 , 0($t0)
sw $t1 , 8($sp)
addi $sp , $sp , 4
addi $sp , $sp , 4 # pop step expr of loop for
j L17 # Jumping to beggining of while loop
L18:
addi $sp , $sp , 8 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
main_end :
# Loading Return value
addi $sp , $sp , 4
lw $v0 , 0($sp)
jr $ra


.data
D0: .asciiz "Should Print from 9 to 6"
D1: .asciiz "-------------------"
D2: .asciiz "Should Print from 9 to 4"
D3: .asciiz "-------------------"
D4: .asciiz "-----"
D5: .asciiz "-------------------"
D6: .asciiz "a should be : 0 -> 7"
D7: .asciiz "----------------------------"
D8: .asciiz "----"
str_false : .asciiz "false" 
str_true : .asciiz "true" 
str_bool : .word str_false , str_true
