.text
.globl main
#-------------------------------------------- Compiler Functions --------------------------------------------#
ReadLine:
        li $t0 , 0
        li $t1 , '\n'
        loopReadLine:
            li $v0 , 12
            syscall
            addi $t0 , $t0 , 1
            addi $sp , $sp , -1
            beq $v0 , $t1 , endLoopReadLine
            sb $v0 , 1($sp)
            j loopReadLine
            endLoopReadLine:
            sb $zero , 1($sp)
        # Allocating Space in Heap
        li $v0 , 9
        addi $a0 , $t0 , 0
        syscall
        move $t1 , $v0 # $t1 Holds the address of String in Heap
        # Moving String from stack to Heap
        addi $t0 , $t0 , -1 # $t0 is the offset of char in Heap ( from the end of allocated area )
        loopMoveString:
            add $t2 , $t1 , $t0 # $t2 is Char address in Heap
            lb $t3 , 1($sp)
            sb $t3 , 0($t2)
            beq $t0 , $zero , endLoopMoveString
            addi $sp , $sp , 1
            addi $t0 , $t0 , -1
            j loopMoveString
        endLoopMoveString:
        addi $sp , $sp , 1
        # Here $v0 Contains the string address allocated in Heap
        jr $ra

StringsEquality:
	move $t1 , $a0 # String 1
	move $t2 , $a1 # String 2
	li $t5 , 1
	loopCheckEquality:
		lb $t3 , 0($t1)
		lb $t4 , 0($t2)
		bne $t3 , $t4 , StringsNotEqualLabel
		beq $t3 , $zero , endLoopCheckEquality
		addi $t1 , $t1 , 1
		addi $t2 , $t2 , 1
		j loopCheckEquality
		StringsNotEqualLabel:
		li $t5 , 0
	endLoopCheckEquality:
	move $v0 , $t5
	jr $ra

StringsInequality:
	addi $sp , $sp , -4
	sw $ra , 4($sp)
	jal StringsEquality
	addi $sp , $sp , 4
	lw $ra , 0($sp)
	nor $v0 , $v0 , $v0
	addi $v0 , $v0 , 2 # All 1's from bit[1] to left becomes Zero
	jr $ra

itod:
	lw $t0 , 4($sp)
    mtc1 $t0, $f12
    cvt.s.w $f12, $f12
    mov.s $f0 , $f12
	jr $ra

dtoi:
	l.s $f0 , 4($sp)
	cvt.w.s $f1,$f0
    mfc1 $v0,$f1 # $v0 is floor of double
    # Convert $v0 to double
    mtc1 $v0 , $f1
    cvt.s.w $f1 , $f1
    # get decimal
    sub.s $f0 , $f0 , $f1
    li.s $f1 , 0.5
    c.le.s $f0 , $f1
    bc1t end_conversion_dtoi
    addi $v0 , $v0 , 1
    end_conversion_dtoi:
	jr $ra

itob:
	lw $v0 , 4($sp)
	beqz $v0 , end_conversion_itob
	li $v0 , 1
	end_conversion_itob:
	jr $ra

btoi:
    lw $v0 , 4($sp)
	jr $ra
#-------------------------------------------- Program --------------------------------------------#
main: # Start function
addi $s5 , $sp , 0 # Storing $sp of function at beginning in $s5
# Function Body :
# Begin of Statement Block
addi $sp , $sp , -0 # Allocate From Stack For Block Statement Variables
addi $fp , $sp , 4
# Storing Frame Pointer and Return Address Before Calling the function : dtoi
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Double Constant : 2.3
li.s $f0, 2.3
s.s $f0, 0($sp)
addi $sp, $sp, -4
jal dtoi # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
sw $v0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Storing Frame Pointer and Return Address Before Calling the function : dtoi
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Double Constant : 2.45
li.s $f0, 2.45
s.s $f0, 0($sp)
addi $sp, $sp, -4
jal dtoi # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
sw $v0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Storing Frame Pointer and Return Address Before Calling the function : dtoi
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Double Constant : 2.5
li.s $f0, 2.5
s.s $f0, 0($sp)
addi $sp, $sp, -4
jal dtoi # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
sw $v0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Storing Frame Pointer and Return Address Before Calling the function : dtoi
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Double Constant : 2.51
li.s $f0, 2.51
s.s $f0, 0($sp)
addi $sp, $sp, -4
jal dtoi # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
sw $v0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Storing Frame Pointer and Return Address Before Calling the function : dtoi
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Double Constant : 2.55
li.s $f0, 2.55
s.s $f0, 0($sp)
addi $sp, $sp, -4
jal dtoi # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
sw $v0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Storing Frame Pointer and Return Address Before Calling the function : dtoi
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Double Constant : 2.99
li.s $f0, 2.99
s.s $f0, 0($sp)
addi $sp, $sp, -4
jal dtoi # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
sw $v0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# String Constant : "------------"
la $t0, D0
sw $t0, 0($sp)
addi $sp, $sp, -4
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Storing Frame Pointer and Return Address Before Calling the function : itod
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Int Constant : 5
li $t0 , 5
sw $t0 , 0($sp)
addi $sp, $sp, -4
jal itod # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
s.s $f0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
l.s $f12 , 0($sp)
li $v0 , 2
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Storing Frame Pointer and Return Address Before Calling the function : btoi
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Bool Constant : true
li $t0 , 1
sw $t0 , 0($sp)
addi $sp, $sp, -4
jal btoi # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
sw $v0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Storing Frame Pointer and Return Address Before Calling the function : btoi
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Bool Constant : false
li $t0, 0
sw $t0 , 0($sp)
addi $sp, $sp, -4
jal btoi # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
sw $v0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
li $v0 , 1
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Storing Frame Pointer and Return Address Before Calling the function : itob
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Int Constant : 8
li $t0 , 8
sw $t0 , 0($sp)
addi $sp, $sp, -4
jal itob # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
sw $v0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
la $t0 , str_bool
sll $a0 , $a0 , 2
add $a0 , $a0 , $t0
lw $a0 , 0($a0)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
# Storing Frame Pointer and Return Address Before Calling the function : itob
addi $sp , $sp , -12
sw $fp , 4($sp)
sw $ra , 8($sp)
sw $s5 , 12($sp)
# Function Arguments
# Int Constant : 0
li $t0 , 0
sw $t0 , 0($sp)
addi $sp, $sp, -4
jal itob # Calling Function
# Pop Arguments of function
addi $sp , $sp , 4
# Load Back Frame Pointer and Return Address After Function call
lw $fp , 4($sp)
lw $ra , 8($sp)
lw $s5 , 12($sp)
addi $sp , $sp , 8
sw $v0 , 4($sp) # Push Return Value from function to Stack
# Print : 
addi $sp , $sp , 4 # Pop Expression of Print
lw $a0 , 0($sp)
la $t0 , str_bool
sll $a0 , $a0 , 2
add $a0 , $a0 , $t0
lw $a0 , 0($a0)
li $v0 , 4
syscall
li $a0 , '\n'
li $v0 , 11
syscall
addi $sp , $sp , 0 # UnAllocate Stack Area (Removing Block Statement Variables)
addi $fp ,$sp , 4
# End of Statement Block
main_end :
jr $ra


.data
D0: .asciiz "------------"
str_false : .asciiz "false" 
str_true : .asciiz "true" 
str_bool : .word str_false , str_true
